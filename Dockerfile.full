# Dockerfile otimizado para aplicação completa (frontend + backend)
FROM node:18-alpine as base

# Instalar dependências do sistema e criar usuário não-root
RUN apk add --no-cache nginx && \
    addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Estágio de build do frontend
FROM base as frontend-build
WORKDIR /app/frontend

# Copia apenas arquivos de dependências primeiro (para melhor cache)
COPY package*.json ./
COPY vite.config.ts ./
COPY tsconfig*.json ./
COPY tailwind.config.js ./
COPY postcss.config.js ./

# Instala TODAS as dependências (incluindo devDependencies para build)
RUN npm ci && npm cache clean --force

# Copia código fonte
COPY src/ ./src/
COPY public/ ./public/
COPY index.html ./

# Constrói o frontend
RUN npm run build:skip-ts

# Estágio de build do backend
FROM base as backend-build
WORKDIR /app/backend

# Copia apenas arquivos de dependências primeiro
COPY backend/package*.json ./
COPY backend/tsconfig*.json ./

# Instala TODAS as dependências (incluindo devDependencies para build)
RUN npm ci && npm cache clean --force

# Copia código fonte
COPY backend/src/ ./src/

# Constrói o backend
RUN npm run build

# Estágio de produção final
FROM base as production

# Configuração do nginx
COPY nginx.conf /etc/nginx/nginx.conf

# Remove configs extras do nginx
RUN rm -f /etc/nginx/conf.d/* /etc/nginx/sites-enabled/*

# Cria diretórios necessários
RUN mkdir -p /usr/share/nginx/html /app/backend && \
    chown -R nextjs:nodejs /usr/share/nginx/html /app/backend

# Copia o frontend construído
COPY --from=frontend-build /app/frontend/dist /usr/share/nginx/html

# Copia o backend construído
COPY --from=backend-build /app/backend/dist /app/backend/dist
COPY --from=backend-build /app/backend/package*.json /app/backend/

# Instala apenas dependências de produção do backend
WORKDIR /app/backend
RUN npm ci --only=production && npm cache clean --force

# Script de inicialização
COPY start.sh /start.sh
RUN chmod +x /start.sh

# Muda para usuário não-root
USER nextjs

# Expõe a porta 80
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost/health || exit 1

# Inicia nginx e backend
CMD ["/start.sh"] 